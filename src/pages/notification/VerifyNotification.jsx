import React, { useEffect } from "react";
import { useToast } from "@chakra-ui/react"; // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Chakra UI
import socket from "../seller_pages/socket"; // socket.io-client ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
import { useDispatch, useSelector } from "react-redux";
import { get_user } from "../../hooks/reducer/auth_reducer";

const VerifyNotification = () => {
  const toast = useToast();
  const dispatch = useDispatch();
  const { userInfo } = useSelector((state) => state.auth);
  const userId = userInfo._id; // ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å auth/token)
  useEffect(() => {
    // 1. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô socket ‡∏ù‡∏±‡πà‡∏á client ‡∏î‡πâ‡∏ß‡∏¢ userId
    dispatch(get_user());
    socket.emit("access_verify_seller_notification", userId);

    // 2. ‡∏£‡∏±‡∏ö event ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å backend
    socket.on("verify_result", (data) => {
      toast({
        title: "üì£ ‡ªÅ‡∫à‡ªâ‡∫á‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫¢‡∫∑‡∫ô‡∫¢‡∫±‡∫ô‡∫ï‡∫ª‡∫ß‡∫ï‡∫ª‡∫ô",
        description: data.message,
        status:
          data.status === "access"
            ? "success"
            : data.status === "rejected"
            ? "error"
            : "info",
        duration: 5000,
        isClosable: true,
      });
    });

    // 3. cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
    return () => {
      socket.off("verify_result");
    };
  }, [toast, dispatch, userId]);

  return null; // ‡πÄ‡∏õ‡πá‡∏ô component ‡∏•‡∏≠‡∏¢ ‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£
};

export default VerifyNotification;
